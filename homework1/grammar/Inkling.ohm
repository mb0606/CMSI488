Inkling {
    Program     =  (Stmt | ClassDecl)
    Stmt   =  SimpleStmt newline+ | IfExpr | ForExpr | FuncDec | WhileExpr
    Block       =  "{" Stmt "}"
    SimpleStmt  =  Call
            |  VarExp "is" Exp                            -- assign
            |  id "is" "Always"? Type Exp       -- vardecl
            |  "exit"                                    -- break
            |  "display" Exp
            |  "gimme" Exp?                              -- return
            |  Exp

    VarExp = VarExp "[" Exp "]"                          -- subscripted
            |  VarExp "." id                             -- field
            | id

    FuncDec = "function" id "(" Params ")" ReturnType Block        -- function
            |  id "is" "Always" "(" Params ")" ReturnType "=>" Block    -- arrowfunction
    Param       =  id "is" Type
    Params      =  ListOf<Param, ",">
    Args        =  ListOf<Exp, ",">
    ReturnType = "is" (Type | "void")

    Call        =  VarExp "(" Args ")"

    WhileExpr = "while" "(" Exp ")" Block
    IfExpr =    Exp "?" Exp ":" Exp                    -- ternary
            |  "if" "(" Exp ")" Block
                ("else if" "(" Exp ")" Block)*
                ("else" Block)?                        -- if
    ForExpr = "for" id "is" Type "in" Exp Block

    ClassDecl   =  "Class" id ("extends" id)? "{" (Field | newline)+ "}"   -- class

    Field       =  id ":" Exp
    Exp = Exp1 "and" Exp     --plus
        | Exp1 "or" Exp      --minus
        | Exp1
    Exp1 = Exp2 relop Exp2    --relop
        | Exp2
    Exp2 = Exp2 addop Exp3    --addop
        | Exp3
    Exp3 = Exp3 mulop Exp4    --mulop
        | Exp4
    Exp4 = Exp5 "^" Exp4      --pow
    Exp5 = prefixOp Exp6      --prefix
        |  Exp6 postfixOp     --postfix
        | Exp6
    Exp6 = id Args
        | Exp7
    Exp7 = "(" Exp ")"        --paren
        | numlit
        | boollit
        | txtlit
        | id
        | Call
        | VarExp
        |  "[" ListOf<Exp, ","> "]"                   -- list
        |   "{" ListOf<Exp, ","> "}"                  -- set
        |  "{" ListOf<KeyValue, ","> "}"              -- dict

    KeyValue = id ":" Exp
    keyword = ( "while" | "if" | "else" | "is" | "true" | "false" | "for" | "do"
    | "display"| "gimme" | "btw:" | "fyi:" | "exit" | "in" | "and" | "or" | "function" | "Num" | "Dict" | "Bool" | "List" | "Text")

    Type = (Num | Dict | Bool | List | Text)
    Num = "Num"
    List    =  "List<" Type ">"
    Set     =  "Set<" Type ">"
    Dict    =  "Dict<" Type "," Type ">"
    Text    =  "Text"
    Bool    = "Bool"
    id          =  ~keyword letter alnum*
    numlit      =  digit+ ("." digit+)? (("E" | "e") ("+" | "-")? digit+)?
    boollit     =  "true" | "false"
    txtlit      =  "\"" (~"\\" ~"\"" ~"\n" ~ "\t" any | escape)* "\""
    escape      =  "\\" ("\\" | "\"" | "\n" | "\t")                   --escape
                |  "\\u{" hexDigit+ "}"                       --hexDigit
    mulop       =  "*" | "/" | "%"
    addop       =  "+" | "-"
    relop       =  "<=" | "<" | "==" | "!=" | ">=" | ">"
    prefixOp    = "--" | "++" | "-" | "!"
    postfixOp   = "++" |"--"
    newline     =  "\n"+
    space      :=  " " | "\t" | comment
    comment     =  "btw:" ~"fyi:" (~"\n" any)*  "\n"      -- singleline
                |  "fyi:" (~":xoxo" any)* ":xoxo"       -- multiline
}
